using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using FluentAssertions;
using Melville.Fonts.SfntParsers.TableDeclarations.CffGlyphs;
using Melville.Fonts.SfntParsers.TableDeclarations.CMaps;
using Melville.Parsing.MultiplexSources;
using Melville.Parsing.ObjectRentals;
using Xunit;

namespace Melville.Pdf.DataModelTests.Fonts.Type1Text;

public class ReadStandardEncoding
{
    private static CffGenericFont FontWithEncodingOffset(
        long offset, uint glyphCount, long charSetOffset)
    {
        using var multiplexSource = MultiplexSourceFactory.Create(Array.Empty<byte>());
        // return new(multiplexSource,
        //     1000, "Fake Font", 0,
        //     new CffIndex(null!, glyphCount, 1, null), 0, 0, null!, charSetOffset, offset);
        return new(1000, "Fake Font",
            new CffIndex(null!, glyphCount, 1, null), null!,
            new TopDictData(multiplexSource,0,0,0,charSetOffset, offset,0));
    }

    [Fact]
    public async Task StandardEncodingAsync()
    {
        var map = await LoadCmapAsync(0);
        map.AllMappings().Should().BeEquivalentTo([
            (1, 0, 0),
            (1, 1, 0),
            (1, 2, 0),
            (1, 3, 0),
            (1, 4, 0),
            (1, 5, 0),
            (1, 6, 0),
            (1, 7, 0),
            (1, 8, 0),
            (1, 9, 0),
            (1, 10, 0),
            (1, 11, 0),
            (1, 12, 0),
            (1, 13, 0),
            (1, 14, 0),
            (1, 15, 0),
            (1, 16, 0),
            (1, 17, 0),
            (1, 18, 0),
            (1, 19, 0),
            (1, 20, 0),
            (1, 21, 0),
            (1, 22, 0),
            (1, 23, 0),
            (1, 24, 0),
            (1, 25, 0),
            (1, 26, 0),
            (1, 27, 0),
            (1, 28, 0),
            (1, 29, 0),
            (1, 30, 0),
            (1, 31, 0),
            (1, 32, 1),
            (1, 33, 2),
            (1, 34, 3),
            (1, 35, 4),
            (1, 36, 5),
            (1, 37, 6),
            (1, 38, 7),
            (1, 39, 8),
            (1, 40, 9),
            (1, 41, 10),
            (1, 42, 11),
            (1, 43, 12),
            (1, 44, 13),
            (1, 45, 14),
            (1, 46, 15),
            (1, 47, 16),
            (1, 48, 17),
            (1, 49, 18),
            (1, 50, 19),
            (1, 51, 20),
            (1, 52, 21),
            (1, 53, 22),
            (1, 54, 23),
            (1, 55, 24),
            (1, 56, 25),
            (1, 57, 26),
            (1, 58, 27),
            (1, 59, 28),
            (1, 60, 29),
            (1, 61, 30),
            (1, 62, 31),
            (1, 63, 32),
            (1, 64, 33),
            (1, 65, 34),
            (1, 66, 35),
            (1, 67, 36),
            (1, 68, 37),
            (1, 69, 38),
            (1, 70, 39),
            (1, 71, 40),
            (1, 72, 41),
            (1, 73, 42),
            (1, 74, 43),
            (1, 75, 44),
            (1, 76, 45),
            (1, 77, 46),
            (1, 78, 47),
            (1, 79, 48),
            (1, 80, 49),
            (1, 81, 50),
            (1, 82, 51),
            (1, 83, 52),
            (1, 84, 53),
            (1, 85, 54),
            (1, 86, 55),
            (1, 87, 56),
            (1, 88, 57),
            (1, 89, 58),
            (1, 90, 59),
            (1, 91, 60),
            (1, 92, 61),
            (1, 93, 62),
            (1, 94, 63),
            (1, 95, 64),
            (1, 96, 65),
            (1, 97, 66),
            (1, 98, 67),
            (1, 99, 68),
            (1, 100, 69),
            (1, 101, 70),
            (1, 102, 71),
            (1, 103, 72),
            (1, 104, 73),
            (1, 105, 74),
            (1, 106, 75),
            (1, 107, 76),
            (1, 108, 77),
            (1, 109, 78),
            (1, 110, 79),
            (1, 111, 80),
            (1, 112, 81),
            (1, 113, 82),
            (1, 114, 83),
            (1, 115, 84),
            (1, 116, 85),
            (1, 117, 86),
            (1, 118, 87),
            (1, 119, 88),
            (1, 120, 89),
            (1, 121, 90),
            (1, 122, 91),
            (1, 123, 92),
            (1, 124, 93),
            (1, 125, 94),
            (1, 126, 95),
            (1, 127, 0),
            (1, 128, 0),
            (1, 129, 0),
            (1, 130, 0),
            (1, 131, 0),
            (1, 132, 0),
            (1, 133, 0),
            (1, 134, 0),
            (1, 135, 0),
            (1, 136, 0),
            (1, 137, 0),
            (1, 138, 0),
            (1, 139, 0),
            (1, 140, 0),
            (1, 141, 0),
            (1, 142, 0),
            (1, 143, 0),
            (1, 144, 0),
            (1, 145, 0),
            (1, 146, 0),
            (1, 147, 0),
            (1, 148, 0),
            (1, 149, 0),
            (1, 150, 0),
            (1, 151, 0),
            (1, 152, 0),
            (1, 153, 0),
            (1, 154, 0),
            (1, 155, 0),
            (1, 156, 0),
            (1, 157, 0),
            (1, 158, 0),
            (1, 159, 0),
            (1, 160, 0),
            (1, 161, 96),
            (1, 162, 97),
            (1, 163, 98),
            (1, 164, 99),
            (1, 165, 100),
            (1, 166, 101),
            (1, 167, 102),
            (1, 168, 103),
            (1, 169, 104),
            (1, 170, 105),
            (1, 171, 106),
            (1, 172, 107),
            (1, 173, 108),
            (1, 174, 109),
            (1, 175, 110),
            (1, 176, 0),
            (1, 177, 111),
            (1, 178, 112),
            (1, 179, 113),
            (1, 180, 114),
            (1, 181, 0),
            (1, 182, 115),
            (1, 183, 116),
            (1, 184, 117),
            (1, 185, 118),
            (1, 186, 119),
            (1, 187, 120),
            (1, 188, 121),
            (1, 189, 122),
            (1, 190, 0),
            (1, 191, 123),
            (1, 192, 0),
            (1, 193, 124),
            (1, 194, 125),
            (1, 195, 126),
            (1, 196, 127),
            (1, 197, 128),
            (1, 198, 129),
            (1, 199, 130),
            (1, 200, 131),
            (1, 201, 0),
            (1, 202, 132),
            (1, 203, 133),
            (1, 204, 0),
            (1, 205, 134),
            (1, 206, 135),
            (1, 207, 136),
            (1, 208, 137),
            (1, 209, 0),
            (1, 210, 0),
            (1, 211, 0),
            (1, 212, 0),
            (1, 213, 0),
            (1, 214, 0),
            (1, 215, 0),
            (1, 216, 0),
            (1, 217, 0),
            (1, 218, 0),
            (1, 219, 0),
            (1, 220, 0),
            (1, 221, 0),
            (1, 222, 0),
            (1, 223, 0),
            (1, 224, 0),
            (1, 225, 138),
            (1, 226, 0),
            (1, 227, 139),
            (1, 228, 0),
            (1, 229, 0),
            (1, 230, 0),
            (1, 231, 0),
            (1, 232, 140),
            (1, 233, 141),
            (1, 234, 142),
            (1, 235, 143),
            (1, 236, 0),
            (1, 237, 0),
            (1, 238, 0),
            (1, 239, 0),
            (1, 240, 0),
            (1, 241, 144),
            (1, 242, 0),
            (1, 243, 0),
            (1, 244, 0),
            (1, 245, 145),
            (1, 246, 0),
            (1, 247, 0),
            (1, 248, 146),
            (1, 249, 147),
            (1, 250, 148),
            (1, 251, 149),
            (1, 252, 0),
            (1, 253, 0),
            (1, 254, 0),
            (1, 255, 0),
        ]);
    }

    [Fact]
    public async Task ExpertEncodingAsync()
    {
        var sut = FontWithEncodingOffset(1, 256, 1);
        var cmaps = await sut.GetCmapSourceAsync();
        cmaps.Count.Should().Be(1);
        var map = await cmaps.GetByIndexAsync(0);
        var names = await sut.GlyphNamesAsync();
        var m2 = map.AllMappings().Select(i => names[i.Glyph]);
        m2.Should().BeEquivalentTo(expertNames);
    }
            private static readonly string[] expertNames = [
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            "space",
            "exclamsmall",
            "Hungarumlautsmall",
            ".notdef",
            "dollaroldstyle",
            "dollarsuperior",
            "ampersandsmall",
            "Acutesmall",
            "parenleftsuperior",
            "parenrightsuperior",
            "twodotenleader",
            "onedotenleader",
            "comma",
            "hyphen",
            "period",
            "fraction",
            "zerooldstyle",
            "oneoldstyle",
            "twooldstyle",
            "threeoldstyle",
            "fouroldstyle",
            "fiveoldstyle",
            "sixoldstyle",
            "sevenoldstyle",
            "eightoldstyle",
            "nineoldstyle",
            "colon",
            "semicolon",
            "commasuperior",
            "threequartersemdash",
            "periodsuperior",
            "questionsmall",
            ".notdef",
            "asuperior",
            "bsuperior",
            "centsuperior",
            "dsuperior",
            "esuperior",
            ".notdef",
            ".notdef",
            ".notdef",
            "isuperior",
            ".notdef",
            ".notdef",
            "lsuperior",
            "msuperior",
            "nsuperior",
            "osuperior",
            ".notdef",
            ".notdef",
            "rsuperior",
            "ssuperior",
            "tsuperior",
            ".notdef",
            "ff",
            "fi",
            "fl",
            "ffi",
            "ffl",
            "parenleftinferior",
            ".notdef",
            "parenrightinferior",
            "Circumflexsmall",
            "hyphensuperior",
            "Gravesmall",
            "Asmall",
            "Bsmall",
            "Csmall",
            "Dsmall",
            "Esmall",
            "Fsmall",
            "Gsmall",
            "Hsmall",
            "Ismall",
            "Jsmall",
            "Ksmall",
            "Lsmall",
            "Msmall",
            "Nsmall",
            "Osmall",
            "Psmall",
            "Qsmall",
            "Rsmall",
            "Ssmall",
            "Tsmall",
            "Usmall",
            "Vsmall",
            "Wsmall",
            "Xsmall",
            "Ysmall",
            "Zsmall",
            "colonmonetary",
            "onefitted",
            "rupiah",
            "Tildesmall",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            ".notdef",
            "exclamdownsmall",
            "centoldstyle",
            "Lslashsmall",
            ".notdef",
            ".notdef",
            "Scaronsmall",
            "Zcaronsmall",
            "Dieresissmall",
            "Brevesmall",
            "Caronsmall",
            ".notdef",
            "Dotaccentsmall",
            ".notdef",
            ".notdef",
            "Macronsmall",
            ".notdef",
            ".notdef",
            "figuredash",
            "hypheninferior",
            ".notdef",
            ".notdef",
            "Ogoneksmall",
            "Ringsmall",
            "Cedillasmall",
            ".notdef",
            ".notdef",
            ".notdef",
            "onequarter",
            "onehalf",
            "threequarters",
            "questiondownsmall",
            "oneeighth",
            "threeeighths",
            "fiveeighths",
            "seveneighths",
            "onethird",
            "twothirds",
            ".notdef",
            ".notdef",
            "zerosuperior",
            "onesuperior",
            "twosuperior",
            "threesuperior",
            "foursuperior",
            "fivesuperior",
            "sixsuperior",
            "sevensuperior",
            "eightsuperior",
            "ninesuperior",
            "zeroinferior",
            "oneinferior",
            "twoinferior",
            "threeinferior",
            "fourinferior",
            "fiveinferior",
            "sixinferior",
            "seveninferior",
            "eightinferior",
            "nineinferior",
            "centinferior",
            "dollarinferior",
            "periodinferior",
            "commainferior",
            "Agravesmall",
            "Aacutesmall",
            "Acircumflexsmall",
            "Atildesmall",
            "Adieresissmall",
            "Aringsmall",
            "AEsmall",
            "Ccedillasmall",
            "Egravesmall",
            "Eacutesmall",
            "Ecircumflexsmall",
            "Edieresissmall",
            "Igravesmall",
            "Iacutesmall",
            "Icircumflexsmall",
            "Idieresissmall",
            "Ethsmall",
            "Ntildesmall",
            "Ogravesmall",
            "Oacutesmall",
            "Ocircumflexsmall",
            "Otildesmall",
            "Odieresissmall",
            "OEsmall",
            "Oslashsmall",
            "Ugravesmall",
            "Uacutesmall",
            "Ucircumflexsmall",
            "Udieresissmall",
            "Yacutesmall",
            "Thornsmall",
            "Ydieresissmall",
        ];


    private static async Task<ICmapImplementation> LoadCmapAsync(long index)
    {
        var sut = FontWithEncodingOffset(index, 256, index);
        var cmaps = await sut.GetCmapSourceAsync();
        cmaps.Count.Should().Be(1);
        var map = await cmaps.GetByIndexAsync(0);
        return map;
    }
}